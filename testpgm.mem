// Auto-generated by memint 11/06/2013 07:28:42
#Format=AddrHex
#Depth=2048
#Width=16
#AddrRadix=3
#DataRadix=3
#Data
#
# Simple bootloader for qrzCore
#
#
#
# call putregs
#  pregs  100 popa  100 popb
000:C04A 0100 803D 0100 807D E090 #
# wait for char 
006:88FE A006 88BE 803F # wait for char & push char
# emit char without drop (for echo)
00A:8022 887E A00B 883D 803F
# emit crlf
00F:000A C00B 000D C00B 803F
# hex1uart
020:000f 8012 0030 8010 8022 0039 8017 A02A 0007 8010 887E A02A 883D 803F
# hex2uart
02E:8022 800F 800F 800F 800F C020 C020 803F
# hex4uart
036:8022 800F 800F 800F 800F 800F 800F 800F 800F C02E C02E 803F
# orh4
# outputs regname + 4 hex 
#    ouart ouart 20 ouart hex4uart rts
042:C02A C02A 0020 C02A C036 0020 C02A 803F
# : printregs
#   dbpc   C    P  orh4 over   N    N  orh4  dup   T    T  orh4
04A:823E 0043 0050 C042 8025 004E 004E C042 8022 0054 0054 C042 833E 0053 0053 C042 
#   dbaa   A    A  orh4 dbab   A    B  orh4 ds>    S    D  orh4
05A:82BE 0041 0041 C042 82FE 0041 0042 C042 802E 0053 0044 C042
#   ss>    S    R  orh4
066:802F 0053 0052 C042 0063 827E A06E 8403 C02A 000A C02A 000D C02A 803F
#
#
# dump
#   crlf   10 d16    1-  dup    0   == jmpz  rts
074:C00F 0010 C080 8043 8022 0000 8015 A076 803F  
# dump 16 words
#   getb hex4   10   :  emit @B+  hex4   1-  dup    0   == jmpz drop crlf rts
080:807E C036 0010 003A C02A 8037 C036 8043 8022 0000 8015 A083 8023 C00F 803F
# main loop
# wait for key and output result
#      0    0   >  emit   20 emit read echo
090:0000 0000 003E C00B 0020 C00B C006 C00A
#    dup   d    == jmpz drop dump jmp
098:8022 0064 8015 A0A0 8023 C074 E092
# receive words
#    dup   g    == jmpz drop call jmp
0A0:8022 0067 8015 A0B0 8023 C100 E000
#  process 0..9, jumps out if below (D0) or above (C8)
#    dup   30    > jmpz  dup   39    < jmpz    f  and
0B0:8022 002F 8017 A0C8 8022 003A 8018 A0C8 000F 8012 
# digit process                     -- word num_digits
#   swap  shl  shl  shl  shl   or swap   1+ swap  jmp
0BA:8024 800E 800E 800E 800E 8013 8024 8042 8024 E096
# process A-F jumps if below (92) or above (D4) process digit (BA)
#    dup   ?    >  jmpz  dup   G     < jmpz   37  sub  jmp
0C8:8022 0040 8017 A0D4 8022 0047 8018 A0D4 0037 8011 E0BA
# writes to memory, if no digits restarts (jmpz 90)
#    dup   20   == jmpz drop swap jmpz !A+  jmp
0D4:8022 0020 8015 A0E0 8023 8024 A096 8031 E096
#   drop
0E0:8023 E092


